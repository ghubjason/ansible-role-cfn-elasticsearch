---
- name: Create necessary directories
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ elasticsearch_build_path }}"

- name: Create ElasticSearch Template
  template:
    src: es.json.j2
    dest: "{{ elasticsearch_template }}"

- name: Run cloudformation
  cloudformation:
    template: "{{ elasticsearch_template }}"
    stack_name: "{{ elasticsearch_stack_name }}"
    region: "{{ elasticsearch_region }}"
    template_parameters:
      ESPublisherLambdaS3Bucket: "{{ elasticsearch_lambda_s3_bucket }}"
      ESPublisherLambdaS3Object: "{{ elasticsearch_lambda_s3_object }}"
      ESInstanceType: "{{ elasticsearch_instance_type }}"
      KinesisShardCount: "{{ elasticsearch_kinesis_shard_count }}"
      ESUseEBS: "{{ elasticsearch_use_ebs }}"
      ESEBSSize: "{{ elasticsearch_ebs_size }}"
      ESEBSType: "{{ elasticsearch_ebs_type }}"
      ESEBSIOPS: "{{ elasticsearch_ebs_iops }}"
      ESDedicatedMasterEnabled: "{{ elasticsearch_dedicated_master_enabled }}"
      ESDedicatedMasterCount: "{{ elasticsearch_dedicated_master_count }}"
      ESDedicatedMasterType: "{{ elasticsearch_dedicated_master_type }}"
      ESZoneAwarenessEnabled: "{{ elasticsearch_zone_awareness_enabled }}"
      ESSnapshotHour: "{{ elasticsearch_snapshot_hour }}"
      ESInstanceCount: "{{ elasticsearch_instance_count }}"
    security_token: "{{ lookup('env','AWS_SESSION_TOKEN' ) }}"
    tags: "{{ elasticsearch_tags }}"
  register: elasticsearch_stack

- name: Convert stack to native
  set_fact:
    kinesis_cwl_role: "{{ elasticsearch_stack.stack_outputs['CWKinesisRoleARN'] }}"
    kinesis_arn: "{{ elasticsearch_stack.stack_outputs['CWKinesisARN'] }}"
  when: elasticsearch_ingest_cloudwatch is defined and elasticsearch_ingest_cloudwatch == "true"

- name: Create Additional Kinesis Access Role for CW
  template:
    src: kinesis_cwl.json.j2
    dest: "{{ elasticsearch_cw_kinesis_access_policy_template }}"
  when: elasticsearch_ingest_cloudwatch is defined and elasticsearch_ingest_cloudwatch == "true"

- name: Attach policy to role
  shell: "aws iam put-role-policy --role-name {{ elasticsearch_stack.stack_outputs['CWKinesisRoleName'] }} --policy-name PermissionsPolicyForCWL  --policy-document fileb://{{ elasticsearch_cw_kinesis_access_policy_template }}"
  when: elasticsearch_ingest_cloudwatch is defined and elasticsearch_ingest_cloudwatch == "true"

- name: Create Kinesis Destination Template for CloudWatch Logs
  template:
    src: kinesis_cw_destination.json.j2
    dest: "{{ elasticsearch_cw_destination_template }}"
  when: elasticsearch_ingest_cloudwatch is defined and elasticsearch_ingest_cloudwatch == "true"

- name: Create log destination stack
  cloudformation:
    stack_name: "{{ elasticsearch_stack_name }}-log-destination"
    region: "{{ elasticsearch_region }}"
    template: "{{ elasticsearch_cw_destination_template }}"
    template_parameters:
      CWKinesisDestinationName: "{{ elasticsearch_cloudwatch_destination_name }}"
      CloudWatchKinesisRoleArn: "{{ kinesis_cwl_role }}"
      KinesisArn: "{{ kinesis_arn }}"
    security_token: "{{ lookup('env','AWS_SESSION_TOKEN' ) }}"
    tags: "{{ elasticsearch_tags }}"
  when: elasticsearch_ingest_cloudwatch is defined and elasticsearch_ingest_cloudwatch == "true"
